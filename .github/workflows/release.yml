name: Release Extension

# 添加权限配置
permissions:
  contents: write

on:
  push:
    tags:
      - 'v*' # 当推送版本标签时触发
  workflow_dispatch: # 添加手动触发选项
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'
      release:
        description: '是否发布到商店'
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install -g web-ext
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        # 移除版本号前缀 'v'
        CLEAN_VERSION="${VERSION#v}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        
    - name: Update manifest version
      run: |
        # 更新 manifest.json 的版本号
        jq '.version = "${{ steps.get_version.outputs.CLEAN_VERSION }}"' manifest.json > temp.json && mv temp.json manifest.json
        cat manifest.json
        
    - name: Build Chromium-based Extension
      run: |
        mkdir -p dist/chrome/icons
        cp manifest.json background.js i18n.js sidepanel.js sidepanel.html styles.css dist/chrome/
        cp -r icons/* dist/chrome/icons/
        cp LICENSE dist/chrome/ || true
        cd dist/chrome
        zip -r ../chrome-extension.zip *
        
    - name: Build Firefox Extension
      run: |
        mkdir -p dist/firefox/icons
        cp background.js i18n.js sidepanel.js sidepanel.html styles.css dist/firefox/
        cp -r icons/* dist/firefox/icons/
        cp LICENSE dist/firefox/ || true
        
        # 修改 manifest.json 适配 Firefox
        jq '.manifest_version = 2 | 
            del(.action) |
            .browser_action = {} |
            del(.side_panel) |
            .sidebar_action = {
              "default_title": "GitHub Repos Sidebar",
              "default_panel": "sidepanel.html",
              "default_icon": {
                "16": "icons/icon16.png",
                "48": "icons/icon48.png",
                "128": "icons/icon128.png"
              }
            } |
            del(.commands._execute_action.suggested_key) |
            .commands._execute_action.suggested_key = {
              "default": "Alt+G"
            }' manifest.json > dist/firefox/manifest.json
        
        # 使用 web-ext 构建 Firefox 扩展
        cd dist/firefox
        web-ext build --overwrite-dest
        mv web-ext-artifacts/*.zip ../firefox-addon.zip

    - name: Upload Chrome artifact
      uses: actions/upload-artifact@v3
      with:
        name: chrome-extension
        path: dist/chrome-extension.zip

    - name: Upload Firefox artifact
      uses: actions/upload-artifact@v3
      with:
        name: firefox-addon
        path: dist/firefox-addon.zip

  publish-chrome:
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: chrome-extension
          
      - name: Upload to Chrome Web Store
        uses: mnao305/chrome-extension-upload@v4.0.1
        with:
          file-path: chrome-extension.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}

  publish-firefox:
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: firefox-addon
          
      - name: Upload to Firefox Add-ons
        uses: trmcnvn/firefox-addon@v1
        with:
          uuid: ${{ secrets.FIREFOX_ADDON_ID }}
          xpi: firefox-addon.zip
          manifest: manifest.json
          api-key: ${{ secrets.FIREFOX_API_KEY }}
          api-secret: ${{ secrets.FIREFOX_API_SECRET }}

  github-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "PRERELEASE=${{ github.event.inputs.prerelease || 'false' }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "PRERELEASE=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Download Chrome artifact
        uses: actions/download-artifact@v3
        with:
          name: chrome-extension
      
      - name: Download Firefox artifact
        uses: actions/download-artifact@v3
        with:
          name: firefox-addon
      
      - name: Generate changelog
        id: changelog
        run: |
          # 从最近的两个标签获取更改日志
          PREVIOUS_TAG=$(git tag --sort=-creatordate | sed -n 2p)
          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果只有一个标签，则获取从第一次提交到现在的日志
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            # 否则获取从上一个标签到现在的日志
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges ${PREVIOUS_TAG}..HEAD)
          fi
          
          # 将更改日志保存到文件中
          echo "$CHANGELOG" > changelog.txt
          
          # 创建多行输出变量
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "CHANGELOG<<$EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## 更新内容
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## 下载
            
            - **Chrome版本**: chrome-extension.zip
            - **Firefox版本**: firefox-addon.zip
            
            ## 安装说明
            
            ### Chrome
            1. 下载 chrome-extension.zip
            2. 解压文件
            3. 打开Chrome浏览器，访问 `chrome://extensions/`
            4. 开启右上角的"开发者模式"
            5. 点击"加载已解压的扩展程序"，选择解压后的文件夹
            
            ### Firefox
            1. 下载 firefox-addon.zip
            2. 在Firefox中打开"about:debugging"
            3. 点击"临时载入附加组件"
            4. 选择下载的zip文件
          files: |
            chrome-extension.zip
            firefox-addon.zip
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ steps.get_version.outputs.PRERELEASE }} 